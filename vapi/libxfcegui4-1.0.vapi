/* libxfcegui4-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Xfce", lower_case_cprefix = "xfce_")]
namespace Xfce {
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class AboutDialog : Gtk.Dialog, Gtk.Buildable, Atk.Implementor {
		public void add_credit (string name, string mail, string task);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AboutDialog.empty ();
		public unowned string get_copyright ();
		public unowned string get_description ();
		public unowned string get_homepage ();
		public unowned Gdk.Pixbuf get_icon ();
		public unowned string get_license ();
		public unowned string get_program ();
		public unowned string get_version ();
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AboutDialog (Gtk.Window parent, Xfce.AboutInfo info, Gdk.Pixbuf icon);
		public void set_copyright (string value);
		public void set_description (string value);
		public void set_homepage (string value);
		public void set_icon (Gdk.Pixbuf icon);
		public void set_license (string value);
		public void set_program (string value);
		public void set_version (string value);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AboutDialog.with_values (Gtk.Window parent, Xfce.AboutInfo info, Gdk.Pixbuf icon);
		public string copyright { get; set; }
		public string description { get; set; }
		public string homepage { get; set; }
		public Gdk.Pixbuf icon { get; set; }
		public string license { get; set; }
		public string program { get; set; }
		public string version { get; set; }
	}
	[Compact]
	[CCode (copy_function = "xfce_about_info_copy", type_id = "XFCE_TYPE_ABOUT_INFO", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class AboutInfo {
		public void add_credit (string name, string mail, string task);
		public unowned Xfce.AboutInfo copy ();
		public unowned string get_copyright ();
		public unowned string get_description ();
		public unowned string get_homepage ();
		public unowned string get_license ();
		public unowned string get_program ();
		public unowned string get_version ();
		[CCode (has_construct_function = false)]
		public AboutInfo (string program, string version, string description, string copyright, string license);
		public void set_copyright (string copyright);
		public void set_description (string description);
		public void set_homepage (string homepage);
		public void set_license (string license);
		public void set_program (string program);
		public void set_version (string version);
	}
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class AppMenuItem : Gtk.ImageMenuItem, Gtk.Buildable, Atk.Implementor {
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AppMenuItem.full (string label, string command, string icon_filename, bool needs_term, bool snotify);
		public unowned string get_command ();
		public unowned string get_icon_name ();
		public bool get_needs_term ();
		public bool get_startup_notification ();
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AppMenuItem ();
		public void set_command (string command);
		public void set_icon_name (string filename);
		public static void set_icon_theme_name (string theme_name);
		public void set_needs_term (bool needs_term);
		public void set_startup_notification (bool snotify);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AppMenuItem.with_command (string label, string command);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AppMenuItem.with_label (string label);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AppMenuItem.with_mnemonic (string label);
		public string command { get; set; }
		public string icon_name { get; set; }
		[NoAccessorMethod]
		public string label { owned get; set; }
		public bool needs_term { get; set; }
		[NoAccessorMethod]
		public bool snotify { get; set; }
		[NoAccessorMethod]
		public bool use_underline { get; set; }
	}
	[Compact]
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class AppMenuItemPriv {
	}
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class Heading : Gtk.Widget, Gtk.Buildable, Atk.Implementor {
		public unowned Gdk.Pixbuf get_icon ();
		public unowned string get_icon_name ();
		public unowned string get_subtitle ();
		public unowned string get_title ();
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public Heading ();
		[NoWrapper]
		public virtual void reserved0 ();
		[NoWrapper]
		public virtual void reserved1 ();
		[NoWrapper]
		public virtual void reserved2 ();
		[NoWrapper]
		public virtual void reserved3 ();
		[NoWrapper]
		public virtual void reserved4 ();
		[NoWrapper]
		public virtual void reserved5 ();
		public void set_icon (Gdk.Pixbuf icon);
		public void set_icon_name (string icon_name);
		public void set_subtitle (string subtitle);
		public void set_title (string title);
		public Gdk.Pixbuf icon { get; set; }
		public string icon_name { get; set; }
		public string subtitle { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class Iconbutton : Gtk.Button, Gtk.Buildable, Atk.Implementor {
		public int icon_height;
		public int icon_width;
		public weak Gtk.Widget image;
		public weak Gdk.Pixbuf pb;
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public Iconbutton.from_pixbuf (Gdk.Pixbuf pb);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public Iconbutton ();
		public void set_pixbuf (Gdk.Pixbuf pixbuf);
	}
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class Menubutton : Gtk.Button, Gtk.Buildable, Atk.Implementor {
		public weak Gtk.Widget hbox;
		public int icon_size;
		public weak Gtk.Widget image;
		public weak Gtk.Widget label;
		public weak Gdk.Pixbuf pb;
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public Menubutton (string text);
		public void set_pixbuf (Gdk.Pixbuf pixbuf);
		public void set_stock_icon (string stock);
		public void set_text (string text);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public Menubutton.with_pixbuf (string text, Gdk.Pixbuf pb);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public Menubutton.with_stock_icon (string text, string stock);
	}
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class ScaledImage : Gtk.Image, Gtk.Buildable, Atk.Implementor {
		public int height;
		public weak Gdk.Pixbuf pb;
		public int width;
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public ScaledImage.from_pixbuf (Gdk.Pixbuf pb);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public ScaledImage ();
		public void set_from_pixbuf (Gdk.Pixbuf pixbuf);
	}
	[Compact]
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class SessionClient {
		public weak string client_id;
		public weak string clone_command;
		public weak string current_directory;
		public Xfce.SessionClientState current_state;
		public void* data;
		public weak Xfce.die_callback die;
		public weak string discard_command;
		public weak string given_client_id;
		public int interact;
		public Xfce.SessionInteractStyle interact_style;
		public char priority;
		public weak string program;
		public weak string resign_command;
		public weak string restart_command;
		public Xfce.SessionRestartStyle restart_style;
		public weak Xfce.save_complete_callback save_complete;
		public weak Xfce.save_phase_2_callback save_phase_2;
		public weak Xfce.save_yourself_callback save_yourself;
		public void* session_connection;
		public bool shutdown;
		public weak Xfce.shutdown_cancelled_callback shutdown_cancelled;
		public weak string shutdown_command;
	}
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class TitledDialog : Gtk.Dialog, Gtk.Buildable, Atk.Implementor {
		public unowned string get_subtitle ();
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public TitledDialog ();
		[NoWrapper]
		public virtual void reserved0 ();
		[NoWrapper]
		public virtual void reserved1 ();
		[NoWrapper]
		public virtual void reserved2 ();
		[NoWrapper]
		public virtual void reserved3 ();
		[NoWrapper]
		public virtual void reserved4 ();
		[NoWrapper]
		public virtual void reserved5 ();
		public void set_subtitle (string subtitle);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public TitledDialog.with_buttons (string title, Gtk.Window parent, Gtk.DialogFlags flags, ...);
		public string subtitle { get; set; }
	}
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class Togglebutton : Gtk.ToggleButton, Gtk.Buildable, Atk.Implementor {
		public weak Gtk.Widget decortoggle;
		public Gtk.ArrowType get_arrow_type ();
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public Togglebutton (Gtk.ArrowType arrow_type);
		public void set_arrow_type (Gtk.ArrowType arrow_type);
	}
	[CCode (cprefix = "DIGIT_", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public enum ClockLedSize {
		SMALL,
		MEDIUM,
		LARGE,
		HUGE
	}
	[CCode (cprefix = "XFCE_CLOCK_", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public enum ClockMode {
		ANALOG,
		DIGITAL,
		LEDS
	}
	[CCode (cprefix = "XFCE_DECORBUTTON_", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public enum DecorbuttonType {
		CLOSE,
		HIDE
	}
	[CCode (cprefix = "XFCE_FILE_CHOOSER_ACTION_", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public enum FileChooserAction {
		OPEN,
		SAVE,
		SELECT_FOLDER,
		CREATE_FOLDER
	}
	[CCode (cprefix = "XEV_FILTER_", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public enum FilterStatus {
		STOP,
		CONTINUE
	}
	[CCode (cprefix = "XFCE_", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public enum IconThemeCategory {
		ICON_CATEGORY_UNKNOWN,
		ICON_CATEGORY_EDITOR,
		ICON_CATEGORY_FILEMAN,
		ICON_CATEGORY_UTILITY,
		ICON_CATEGORY_GAME,
		ICON_CATEGORY_HELP,
		ICON_CATEGORY_MULTIMEDIA,
		ICON_CATEGORY_NETWORK,
		ICON_CATEGORY_GRAPHICS,
		ICON_CATEGORY_PRINTER,
		ICON_CATEGORY_PRODUCTIVITY,
		ICON_CATEGORY_OFFICE,
		ICON_CATEGORY_SOUND,
		ICON_CATEGORY_TERMINAL,
		ICON_CATEGORY_DEVELOPMENT,
		ICON_CATEGORY_SETTINGS,
		ICON_CATEGORY_SYSTEM,
		ICON_CATEGORY_WINE,
		ICON_CATEGORY_ACCESSORIES,
		N_BUILTIN_ICON_CATEGORIES
	}
	[CCode (cprefix = "SESSION_CLIENT_", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public enum SessionClientState {
		IDLE,
		SAVING_PHASE_1,
		WAITING_FOR_PHASE_2,
		SAVING_PHASE_2,
		WAITING_FOR_INTERACT,
		DONE_WITH_INTERACT,
		FROZEN,
		DISCONNECTED,
		REGISTERING
	}
	[CCode (cprefix = "SESSION_INTERACT_", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public enum SessionInteractStyle {
		NONE,
		ERRORS,
		ANY
	}
	[CCode (cprefix = "SESSION_RESTART_", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public enum SessionRestartStyle {
		IF_RUNNING,
		ANYWAY,
		IMMEDIATELY,
		NEVER
	}
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static delegate void die_callback (void* client_data);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static delegate void interact_callback (void* client_data, Xfce.SessionInteractStyle interact_style);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static delegate void save_complete_callback (void* client_data);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static delegate void save_phase_2_callback (void* client_data);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static delegate void save_yourself_callback (void* client_data, int save_style, bool shutdown, int interact_style, bool fast);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static delegate void shutdown_cancelled_callback (void* client_data);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public const string CUSTOM_BUTTON;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public const string CUSTOM_PIXBUF_BUTTON;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public const string CUSTOM_STOCK_BUTTON;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public const int LIBXFCEGUI4_MAJOR_VERSION;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public const int LIBXFCEGUI4_MICRO_VERSION;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public const int LIBXFCEGUI4_MINOR_VERSION;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public const string STARTUP_NOTIFICATION_ENVIRONMENT_DESKTOP_STARTUP_ID;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public const int SYSTEM_TRAY_BEGIN_MESSAGE;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public const int SYSTEM_TRAY_CANCEL_MESSAGE;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public const int SYSTEM_TRAY_REQUEST_DOCK;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public const int UPDATE_DELAY_LENGTH;
	[CCode (cname = "client_session_free", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_free (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_client_id", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string client_session_get_client_id (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_clone_command", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string client_session_get_clone_command (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_current_directory", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string client_session_get_current_directory (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_current_state", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static Xfce.SessionClientState client_session_get_current_state (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_data", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void* client_session_get_data (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_die_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Xfce.die_callback client_session_get_die_callback (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_discard_command", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string client_session_get_discard_command (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_given_client_id", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string client_session_get_given_client_id (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_interact_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static int client_session_get_interact_callback (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_interact_style", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static Xfce.SessionInteractStyle client_session_get_interact_style (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_priority", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static char client_session_get_priority (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_program", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string client_session_get_program (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_resign_command", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string client_session_get_resign_command (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_restart_command", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string client_session_get_restart_command (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_restart_style", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static Xfce.SessionRestartStyle client_session_get_restart_style (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_save_complete_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Xfce.save_complete_callback client_session_get_save_complete_callback (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_save_phase_2_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Xfce.save_phase_2_callback client_session_get_save_phase_2_callback (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_save_yourself_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Xfce.save_yourself_callback client_session_get_save_yourself_callback (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_session_connection", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void* client_session_get_session_connection (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_shutdown_cancelled_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Xfce.shutdown_cancelled_callback client_session_get_shutdown_cancelled_callback (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_get_shutdown_command", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string client_session_get_shutdown_command (Xfce.SessionClient session_client);
	[CCode (cname = "client_session_new", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Xfce.SessionClient client_session_new (int argc, string[] argv, void* data, Xfce.SessionRestartStyle restart_style, char priority);
	[CCode (cname = "client_session_new_full", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Xfce.SessionClient client_session_new_full (void* data, Xfce.SessionRestartStyle restart_style, char priority, string client_id, string program, string current_directory, string restart_command, string clone_command, string discard_command, string resign_command, string shutdown_command);
	[CCode (cname = "client_session_set_client_id", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_client_id (Xfce.SessionClient session_client, string value);
	[CCode (cname = "client_session_set_clone_command", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_clone_command (Xfce.SessionClient session_client, string value);
	[CCode (cname = "client_session_set_current_directory", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_current_directory (Xfce.SessionClient session_client, string value);
	[CCode (cname = "client_session_set_data", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_data (Xfce.SessionClient session_client, void* value);
	[CCode (cname = "client_session_set_die_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_die_callback (Xfce.SessionClient session_client, Xfce.die_callback value);
	[CCode (cname = "client_session_set_discard_command", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_discard_command (Xfce.SessionClient session_client, string value);
	[CCode (cname = "client_session_set_interact_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_interact_callback (Xfce.SessionClient session_client, int value);
	[CCode (cname = "client_session_set_priority", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_priority (Xfce.SessionClient session_client, char value);
	[CCode (cname = "client_session_set_program", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_program (Xfce.SessionClient session_client, string value);
	[CCode (cname = "client_session_set_resign_command", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_resign_command (Xfce.SessionClient session_client, string value);
	[CCode (cname = "client_session_set_restart_command", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_restart_command (Xfce.SessionClient session_client, string value);
	[CCode (cname = "client_session_set_restart_style", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_restart_style (Xfce.SessionClient session_client, Xfce.SessionRestartStyle value);
	[CCode (cname = "client_session_set_save_complete_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_save_complete_callback (Xfce.SessionClient session_client, Xfce.save_complete_callback value);
	[CCode (cname = "client_session_set_save_phase_2_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_save_phase_2_callback (Xfce.SessionClient session_client, Xfce.save_phase_2_callback value);
	[CCode (cname = "client_session_set_save_yourself_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_save_yourself_callback (Xfce.SessionClient session_client, Xfce.save_yourself_callback value);
	[CCode (cname = "client_session_set_shutdown_cancelled_callback", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_shutdown_cancelled_callback (Xfce.SessionClient session_client, Xfce.shutdown_cancelled_callback value);
	[CCode (cname = "client_session_set_shutdown_command", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void client_session_set_shutdown_command (Xfce.SessionClient session_client, string value);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool confirm (string text, string stock_id, string action);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gtk.Widget create_framebox (string title, out unowned Gtk.Widget frame_bin);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gtk.Widget create_framebox_with_content (string title, Gtk.Widget content);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gtk.Widget create_header (Gdk.Pixbuf icon, string text);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gtk.Widget create_header_with_image (Gtk.Widget image, string text);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gtk.Widget create_mixed_button (string stock, string text);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gtk.Widget create_small_label (string text);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void err (string format);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool exec (string cmd, bool in_terminal, bool use_sn) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool exec_argv (out unowned string argv, bool in_terminal, bool use_sn) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool exec_argv_on_screen (Gdk.Screen screen, out unowned string argv, bool in_terminal, bool use_sn) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool exec_argv_with_envp (out unowned string argv, bool in_terminal, bool use_sn, out unowned string envp) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool exec_argv_with_envp_on_screen (Gdk.Screen screen, out unowned string argv, bool in_terminal, bool use_sn, out unowned string envp) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool exec_on_screen (Gdk.Screen screen, string cmd, bool in_terminal, bool use_sn) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool exec_sync (string cmd, bool in_terminal, bool use_sn) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool exec_sync_with_envp (string cmd, bool in_terminal, bool use_sn, out unowned string envp) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool exec_with_envp (string cmd, bool in_terminal, bool use_sn, out unowned string envp) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool exec_with_envp_on_screen (Gdk.Screen screen, string cmd, bool in_terminal, bool use_sn, out unowned string envp) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string gdk_display_get_fullname (Gdk.Display display);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gdk.Screen gdk_display_locate_monitor_with_pointer (Gdk.Display display, int monitor_return);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string gdk_screen_get_fullname (Gdk.Screen screen);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool gdk_spawn_command_line_on_screen (Gdk.Screen screen, string command_line) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool gdk_spawn_on_screen (Gdk.Screen screen, string working_directory, string argv, string envp, GLib.SpawnFlags flags, GLib.SpawnChildSetupFunc child_setup, int child_pid) throws GLib.Error;
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool gdk_spawn_on_screen_with_pipes (Gdk.Screen screen, string working_directory, string argv, string envp, GLib.SpawnFlags flags, GLib.SpawnChildSetupFunc child_setup, int child_pid, int standard_input, int standard_output, int standard_error) throws GLib.Error;
	[CCode (cname = "get_font_desc", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Pango.FontDescription get_font_desc (Gtk.Widget widget);
	[CCode (cname = "get_style", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string get_style (Gtk.Widget widget, string name, string state);
	[CCode (cname = "get_style_gc", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gdk.GC get_style_gc (Gtk.Widget widget, string state, string style);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void gtk_window_center_on_monitor (Gtk.Window window, Gdk.Screen screen, int monitor);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void gtk_window_center_on_monitor_with_pointer (Gtk.Window window);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void info (string format);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gdk.Pixbuf inline_icon_at_size (uchar data, int width, int height);
	[CCode (cname = "logout_session", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void logout_session (Xfce.SessionClient session_client);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static int message_dialog (Gtk.Window parent, string title, string icon_id, string primary_text, string secondary_text, ...);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gtk.Widget message_dialog_new (Gtk.Window parent, string title, string icon_id, string primary_text, string secondary_text, ...);
	[CCode (cname = "pango_get_context", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Pango.Context pango_get_context (Gtk.Widget widget);
	[CCode (cname = "session_init", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static bool session_init (Xfce.SessionClient session_client);
	[CCode (cname = "session_shutdown", cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void session_shutdown (Xfce.SessionClient session_client);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void startup_notification_cancel (string id);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string startup_notification_cleanup_environment (out unowned string envp);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string startup_notification_modify_environment (out unowned string envp, string id);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string startup_notification_start (Gdk.Screen screen, string path);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gdk.Pixbuf themed_icon_load (string name, int size);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gdk.Pixbuf themed_icon_load_category (Xfce.IconThemeCategory category, int size);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned Gdk.Pixbuf themed_icon_load_list (GLib.List names, int size);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string themed_icon_lookup (string name, int size);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string themed_icon_lookup_category (Xfce.IconThemeCategory category, int size);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static unowned string themed_icon_lookup_list (GLib.List names, int size);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void verr (string format, void* ap);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void vinfo (string format, void* ap);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void vwarn (string format, void* ap);
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public static void warn (string format);
}
