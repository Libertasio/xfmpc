/* libxfcegui4-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Xfce", lower_case_cprefix = "xfce_")]
namespace Xfce {
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class AppMenuItem : Gtk.ImageMenuItem, Gtk.Buildable, Atk.Implementor {
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AppMenuItem.full (string label, string command, string icon_filename, bool needs_term, bool snotify);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AppMenuItem ();
		public static void set_icon_theme_name (string theme_name);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AppMenuItem.with_command (string label, string command);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AppMenuItem.with_label (string label);
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public AppMenuItem.with_mnemonic (string label);
		public string command { get; set; }
		public string icon_name { get; set; }
		[NoAccessorMethod]
		public string label { owned get; set; }
		public bool needs_term { get; set; }
		[NoAccessorMethod]
		public bool snotify { get; set; }
		[NoAccessorMethod]
		public bool use_underline { get; set; }
	}
	[Compact]
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class Dialog {
		[CCode (cname = "xfce_confirm")]
		public static bool confirm (string text, string stock_id, string? action);
		[CCode (cname = "xfce_err")]
		public static void error (string format);
		[CCode (cname = "xfce_info")]
		public static void info (string format);
		[CCode (cname = "xfce_warn")]
		public static void warning (string format);
	}
	[Compact]
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class Exec {
		[CCode (cname = "xfce_exec")]
		public static bool exec (string cmd, bool in_terminal, bool use_sn) throws GLib.Error;
		[CCode (cname = "xfce_exec_with_envp")]
		public static bool exec_with_envp (string cmd, bool in_terminal, bool use_sn, string[] envp) throws GLib.Error;
	}
	[Compact]
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class Extensions {
		[CCode (cname = "xfce_gdk_display_get_fullname")]
		public static string gdk_display_get_fullname (Gdk.Display display);
		[CCode (cname = "xfce_gdk_display_locate_monitor_with_pointer")]
		public static unowned Gdk.Screen gdk_display_locate_monitor_with_pointer (Gdk.Display? display, out int? monitor_return);
		[CCode (cname = "xfce_gdk_screen_get_fullname")]
		public static string gdk_screen_get_fullname (Gdk.Screen screen);
		[CCode (cname = "xfce_gdk_spawn_command_line_on_screen")]
		public static bool gdk_spawn_command_line_on_screen (Gdk.Screen screen, string command_line) throws GLib.Error;
		[CCode (cname = "xfce_gdk_spawn_on_screen")]
		public static bool gdk_spawn_on_screen (Gdk.Screen screen, string? working_directory, string[] argv, string[]? envp, GLib.SpawnFlags flags, GLib.SpawnChildSetupFunc child_setup, out int? child_pid) throws GLib.Error;
		[CCode (cname = "xfce_gdk_spawn_on_screen_with_pipes")]
		public static bool gdk_spawn_on_screen_with_pipes (Gdk.Screen screen, string? working_directory, string[] argv, string[]? envp, GLib.SpawnFlags flags, GLib.SpawnChildSetupFunc child_setup, out int? child_pid, out int? standard_input, out int? standard_output, out int? standard_error) throws GLib.Error;
		[CCode (cname = "xfce_gtk_window_center_on_monitor")]
		public static void gtk_window_center_on_monitor (Gtk.Window window, Gdk.Screen screen, int monitor);
		[CCode (cname = "xfce_gtk_window_center_on_monitor_with_pointer")]
		public static void gtk_window_center_on_monitor_with_pointer (Gtk.Window window);
	}
	[Compact]
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class Icon {
		[CCode (cname = "xfce_inline_icon_at_size")]
		public static Gdk.Pixbuf inline_at_size (string data, int width, int height);
		[CCode (cname = "xfce_themed_icon_load")]
		public static Gdk.Pixbuf load (string name, int size);
		[CCode (cname = "xfce_themed_icon_lookup")]
		public static string lookup (string name, int size);
	}
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class TitledDialog : Gtk.Dialog, Gtk.Buildable, Atk.Implementor {
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public TitledDialog ();
		[CCode (type = "GtkWidget*", has_construct_function = false)]
		public TitledDialog.with_buttons (string? title, Gtk.Window? parent, Gtk.DialogFlags flags, ...);
		public string subtitle { get; set; }
	}
	[Compact]
	[CCode (cheader_filename = "libxfcegui4/libxfcegui4.h")]
	public class WidgetHelpers {
		[CCode (cname = "xfce_create_framebox")]
		public static unowned Gtk.Widget create_framebox (string title, out unowned Gtk.Widget frame_bin);
		[CCode (cname = "xfce_create_framebox_with_content")]
		public static unowned Gtk.Widget create_framebox_with_content (string title, Gtk.Widget content);
	}
}
